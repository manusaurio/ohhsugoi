CREATE TABLE manga(
  id INTEGER PRIMARY KEY NOT NULL,
  title TEXT NOT NULL,
  description TEXT NOT NULL,
  img_URL TEXT,
  link TEXT,
  demographics TEXT NOT NULL,
  volumes INTEGER,
  pages_per_volume INTEGER,
  chapters INTEGER,
  pages_per_chapter INTEGER,
  read INTEGER NOT NULL, --boolean
  insertion_date INTEGER NOT NULL DEFAULT (UNIXEPOCH()),
  author_id INTEGER,
  deleted INTEGER NOT NULL DEFAULT 0 --bolean
);

CREATE TABLE tag (
  id INTEGER PRIMARY KEY NOT NULL,
  title TEXT UNIQUE NOT NULL
);

CREATE TABLE manga_tag_association (
    tag_id INTEGER NOT NULL,
    manga_id INTEGER NOT NULL,
    FOREIGN KEY(manga_id) REFERENCES manga(id),
    FOREIGN KEY(tag_id) REFERENCES tag(id)
);

CREATE INDEX tag_index ON manga_tag_association(tag_id, manga_id);

CREATE VIRTUAL TABLE mangafts USING fts5(manga_id INTEGER UNINDEXED, title TEXT, tokenize="trigram");

CREATE TRIGGER insert_into_mangafts
AFTER INSERT ON manga
BEGIN
  INSERT INTO mangafts (manga_id, title)
  VALUES (new.id, new.title);
END;

CREATE TRIGGER update_into_mangafts
AFTER UPDATE ON manga
BEGIN
    UPDATE mangafts SET title = new.title WHERE manga_id = new.id;
END;

CREATE TABLE scheduled_announcement(
  id INTEGER PRIMARY KEY NOT NULL,
  content TEXT NOT NULL,
  scheduled_date INTEGER NOT NULL,
  mention_snowflake_id TEXT,
  status TEXT NOT NULL DEFAULT 'PENDING' -- PENDING, SENT, CANCELLED, FAILED
);

CREATE TABLE discord_user_timezone(
  snowflake_id TEXT PRIMARY KEY NOT NULL,
  timezone TEXT
);

CREATE TABLE poll(
  id INTEGER PRIMARY KEY NOT NULL,
  insertion_date INTEGER NOT NULL DEFAULT (UNIXEPOCH()),
  author_id INTEGER,
  title TEXT NOT NULL,
  description TEXT,
  image_filename TEXT,
  single_vote INTEGER NOT NULL DEFAULT 0,
  finished_date INTEGER -- when it actually finished (if it's NULL then it's an ongoing poll)
);

-- we do not store the order or options
-- to make our lives easier, we sort it by .rowid
CREATE TABLE poll_option(
  id BLOB PRIMARY KEY NOT NULL,
  poll_id INTEGER NOT NULL,
  description TEXT NOT NULL,
  FOREIGN KEY(poll_id) REFERENCES poll(id)
);

CREATE TABLE vote(
  user_id INTEGER NOT NULL,
  poll_id INTEGER NOT NULL,
  poll_option_id BLOB NOT NULL,
  UNIQUE(user_id, poll_id, poll_option_id),
  FOREIGN KEY(poll_id) REFERENCES poll(id),
  FOREIGN KEY(poll_option_id) REFERENCES poll_option(id)
);

-- BEGIN voting rules
CREATE TRIGGER enforce_single_vote_rule_insert
AFTER INSERT ON vote
WHEN (
  SELECT single_vote FROM poll WHERE poll.id = new.poll_id
) = 1
BEGIN
  DELETE FROM vote WHERE poll_id = new.poll_id AND poll_option_id != new.poll_option_id AND new.user_id = user_id;
END;

CREATE TRIGGER prevent_vote_on_finished_poll_delete
BEFORE DELETE ON vote
WHEN (SELECT finished_date FROM poll WHERE old.poll_id = poll.id) IS NOT NULL
BEGIN
  SELECT RAISE(ABORT, 'Cannot delete vote: poll has been marked as finished');
END;

CREATE TRIGGER prevent_vote_on_finished_poll_insert
BEFORE INSERT ON vote
WHEN (SELECT finished_date FROM poll WHERE new.poll_id = poll.id) IS NOT NULL
BEGIN
  SELECT RAISE(ABORT, 'Cannot insert vote: poll has been marked as finished');
END;
-- END voting rules

PRAGMA user_version = 4;

searchTagTitle:
SELECT t.title FROM tag t WHERE title LIKE :name || '%' LIMIT :limit;

selectMangaWithTags:
SELECT m.*, GROUP_CONCAT(tag.title) AS tags FROM manga m
LEFT JOIN manga_tag_association ass ON ass.manga_id = m.id
LEFT JOIN tag ON tag.id = ass.tag_id
WHERE m.id IN ? AND m.deleted = 0
GROUP BY m.id;

insert:
INSERT INTO manga(title, description, link, img_URL, demographics, volumes, pages_per_volume, chapters, pages_per_chapter, read)
VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
RETURNING id;

deleteManga:
UPDATE manga SET deleted = 1 WHERE id = :manga_id AND deleted = 0
RETURNING id;

insertTag:
INSERT INTO tag(title) VALUES (?)
ON CONFLICT(title) DO UPDATE SET title=excluded.title
RETURNING id;

insertTagAssociation:
INSERT INTO manga_tag_association(tag_id, manga_id) VALUES(?, ?);

removeTagAssociation:
DELETE FROM manga_tag_association
WHERE manga_id = :manga_id AND tag_id IN
  (SELECT id FROM tag WHERE title IN :tag_name);

selectTagsFromManga:
SELECT tag.title FROM tag
JOIN manga_tag_association AS ass ON tag.id = ass.tag_id
JOIN manga ON ass.manga_id = manga.id
WHERE manga.id = :manga_id AND manga.deleted = 0;

updateNonNullablesManga:
UPDATE manga
SET
  title = CASE WHEN :title IS NULL THEN title ELSE :title END,
  description = CASE WHEN :description IS NULL THEN description ELSE :description END,
  img_URL = CASE WHEN :img_URL IS NULL THEN img_URL ELSE :img_URL END,
  link = CASE WHEN :link IS NULL THEN link ELSE :link END,
  demographics = CASE WHEN :demographics IS NULL THEN demographics ELSE :demographics END,
  volumes = CASE WHEN :volumes IS NULL THEN volumes ELSE :volumes END,
  pages_per_volume = CASE WHEN :pages_per_volume IS NULL THEN pages_per_volume ELSE :pages_per_volume END,
  chapters = CASE WHEN :chapters IS NULL THEN chapters ELSE :chapters END,
  pages_per_chapter = CASE WHEN :pages_per_chapter IS NULL THEN pages_per_chapter ELSE :pages_per_chapter END,
  read = CASE WHEN :read IS NULL THEN read ELSE :read END
WHERE id = :manga_id AND deleted = 0;

unsetImgURL:
UPDATE manga SET img_URL = NULL
WHERE id = :manga_id AND deleted = 0;

unsetLink:
UPDATE manga SET link = NULL
WHERE id = :manga_id AND deleted = 0;

unsetVolumes:
UPDATE manga SET volumes = NULL
WHERE id = :manga_id AND deleted = 0;

unsetPagesPerVolume:
UPDATE manga SET pages_per_volume = NULL
WHERE id = :manga_id AND deleted = 0;

unsetChapters:
UPDATE manga SET chapters = NULL
WHERE id = :manga_id  AND deleted = 0;

unsetPagesPerChapter:
UPDATE manga SET pages_per_chapter = NULL
WHERE id = :manga_id AND deleted = 0 AND deleted = 0;

getLastInsertRowId:
SELECT last_insert_rowid();

selectTagId:
SELECT tag.id FROM tag WHERE tag.title = :tagName;

updateMangaImgURL:
UPDATE manga
SET img_URL = :imgURL
WHERE manga.id = :mangaId AND deleted = 0;

searchMangaTitlesFTS:
SELECT m.id, m.title FROM manga m
JOIN mangafts ON mangafts.title = m.title
WHERE mangafts MATCH :terms AND m.deleted = 0
ORDER BY "rank"
LIMIT :limit;

searchMangaTitlesStartingWith:
SELECT m.id, m.title FROM manga m
WHERE m.title LIKE :text || '%' AND m.deleted = 0
LIMIT :limit;

searchMangaWithTagsFTS:
SELECT manga.*, GROUP_CONCAT(tag.title) AS tags FROM manga
LEFT JOIN manga_tag_association ass ON ass.manga_id = manga.id
LEFT JOIN tag ON tag.id = ass.tag_id
JOIN mangafts ON mangafts.manga_id = manga.id
WHERE (mangafts MATCH :terms)
    AND (manga.deleted = 0)
    AND (manga.demographics = :demographic_filter OR :demographic_filter IS NULL)
GROUP BY manga.id
HAVING (MAX(tag.title = :tag_filter_a) OR :tag_filter_a IS NULL)
  AND (MAX(tag.title = :tag_filter_b) OR :tag_filter_b IS NULL)
ORDER BY "rank"
LIMIT :limit;

searchMangaWithTags:
SELECT manga.*, GROUP_CONCAT(tag.title) AS tags FROM manga
LEFT JOIN manga_tag_association ass ON ass.manga_id = manga.id
LEFT JOIN tag ON tag.id = ass.tag_id
WHERE manga.deleted = 0
  AND (manga.demographics = :demographic_filter OR :demographic_filter IS NULL)
GROUP BY manga.id
HAVING (MAX(tag.title = :tag_filter_a) OR :tag_filter_a IS NULL)
  AND (MAX(tag.title = :tag_filter_b) OR :tag_filter_b IS NULL)
LIMIT :limit;

insertAnnouncement:
INSERT INTO scheduled_announcement(content, scheduled_date, mention_snowflake_id)
VALUES(:content, :scheduled_date, :mention_id) RETURNING id;

markAnnouncementAsSent:
UPDATE scheduled_announcement SET status = 'SENT' WHERE id = :id RETURNING id;

markAnnouncementAsCancelled:
UPDATE scheduled_announcement SET status = 'CANCELLED' WHERE id = :id AND status = 'PENDING' RETURNING id;

markAnnouncementAsFailed:
UPDATE scheduled_announcement SET status = 'FAILED' WHERE id = :id AND status = 'PENDING' RETURNING id;

selectAnnouncement:
SELECT id, content, scheduled_date, mention_snowflake_id, status FROM scheduled_announcement WHERE id = :announcement_id;

selectAnnouncements:
SELECT id, content, scheduled_date, mention_snowflake_id, status FROM scheduled_announcement WHERE status = :status OR :status IS NULL;

editAnnouncement:
UPDATE scheduled_announcement
SET
  content = CASE WHEN :content IS NULL THEN content ELSE :content END,
  mention_snowflake_id = CASE WHEN :mentionId IS NULL THEN mention_snowflake_id ELSE :mentionId END,
  scheduled_date = CASE WHEN :date IS NULL THEN scheduled_date ELSE :date END
WHERE id = :id AND status = 'PENDING'
RETURNING id;

unsetMentionFromAnnouncement:
UPDATE scheduled_announcement
SET mention_snowflake_id = NULL WHERE id = :id AND status = 'PENDING' RETURNING id;

insertUser:
INSERT INTO discord_user_timezone(snowflake_id, timezone) VALUES (:snowflake_id, :timezone)
ON CONFLICT(snowflake_id) DO UPDATE SET timezone = :timezone;

getUser:
SELECT dut.snowflake_id, dut.timezone FROM discord_user_timezone dut WHERE snowflake_id = :snowflake_id;

insertPoll:
INSERT INTO poll(author_id, title, description, single_vote, image_filename)
  VALUES(:authorId, :title, :description, :singleVote, :imageFileName)
RETURNING id;

insertPollOption:
INSERT INTO poll_option(id, poll_id, description)
  VALUES(:pollOptionID, :pollID, :description);

selectPoll:
SELECT
  id, insertion_date, author_id, title,
  description, image_filename, single_vote,
  finished_date
FROM poll
WHERE id = :pollID
AND :finishedFilter IS NULL
OR :finishedFilter = 1 AND finished_date IS NOT NULL
OR :finishedFilter = 2 AND finished_date IS NULL;

selectPollByOptionID:
SELECT
  p.id, p.insertion_date, p.author_id, title,
  p.description, p.image_filename, p.single_vote,
  p.finished_date
FROM poll p
JOIN poll_option po ON p.id = po.poll_id WHERE po.id = :pollID;

selectPollOptionsByPollID:
SELECT po.id, po.description, COUNT(v.poll_option_id) AS votes FROM poll_option po
LEFT JOIN vote v ON po.id = v.poll_option_id
LEFT JOIN poll p ON po.poll_id = p.id
WHERE p.id = :pollID
GROUP BY po.id
ORDER BY po.rowid; -- hacky

finishPoll:
UPDATE poll SET finished_date = UNIXEPOCH() WHERE id = :pollID AND finished_date IS NULL
RETURNING 1;

toggleVote {
  DELETE FROM vote
  WHERE
    user_id = :userID
    AND poll_option_id = :pollOptionID;

  INSERT INTO vote(user_id, poll_id, poll_option_id)
  SELECT :userID, p.id, :pollOptionID
  FROM poll p
  JOIN poll_option po ON p.id = po.poll_id AND po.id = :pollOptionID
  WHERE (SELECT Changes() = 0);

  SELECT Changes() AS positive FROM poll_option WHERE id = :pollOptionID;
}
